#в пакете db.entities предпологается опсание классов для ORM
#в данном файле описан класс совмещающий в себе структуру таблицы и модели (декларативный подход по версии sqlalchemy)
from app.db.database import Base# импорт базового класса который следует использовать при создании клссов бд
from sqlalchemy import TIMESTAMP, Column, String, Integer #точенный импорт необходимых типов из sqlalchemy
from sqlalchemy.sql import func#иморт sql функций здесь использован для создания автоматического выставления времени при создании новых записей в бд

#класс описывающий таблиц users также описывает модель (совмещает функционал)
#структура таблицы
# id - целое число - первичный ключ - сурагатный ключ с уникальными значениями, каждое на еденицу больше предыдущего нумерация от 1 и выше
# name - строка - выставленно ограниченее что ее надо обязательно заполнить хотябы пустой строкой нельзя осталвть NULL - хранит имя юзера нет ограничений на уникальность для простоты 
# password - строка - ограничение такие же ка на имя - пароль пользователя, здесь храниться в открытом виде в нормальном проекте это не допустимо
# createdAt - дата создания - тоже не NULL - но заполняется автоматически засчет server_default = func.now() выставляется текущая дата время
# тип TIMESTAMP(timezone=True) - дата время с учетов часовго пояса

class User(Base): #User - имя класса (Base) - в скобках указан базовый класс функционал которого наследует User
    __tablename__ = "users" #имя таблицы в бд
    id = Column(Integer, primary_key=True)

    name = Column(String, nullable=False)

    password = Column(String, nullable=False)

    createdAt = Column(
        TIMESTAMP(timezone=True), nullable=False, server_default=func.now()
    )
